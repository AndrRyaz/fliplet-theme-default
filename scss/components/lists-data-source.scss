@mixin lfd($options: (), $widgetInstanceId: '', $widgetInstanceUUID: '') {
  $configuration: map-merge((
    lfdBackgroundColor: $lfdBackgroundColor,
    lfdBackgroundColorTablet: $lfdBackgroundColorTablet,
    lfdBackgroundColorDesktop: $lfdBackgroundColorDesktop,
    lfdFontColor: $lfdFontColor,
    lfdFontColorTablet: $lfdFontColorTablet,
    lfdFontColorDesktop: $lfdFontColorDesktop,
    lfdOverlayBackgroundColor: $lfdOverlayBackgroundColor,
    lfdOverlayBackgroundColorTablet: $lfdOverlayBackgroundColorTablet,
    lfdOverlayBackgroundColorDesktop: $lfdOverlayBackgroundColorDesktop,
    lfdOverlayFontColor: $lfdOverlayFontColor,
    lfdOverlayFontColorTablet: $lfdOverlayFontColorTablet,
    lfdOverlayFontColorDesktop: $lfdOverlayFontColorDesktop,
    lfdDetailBackgroundColor: $lfdDetailBackgroundColor,
    lfdDetailBackgroundColorTablet: $lfdDetailBackgroundColorTablet,
    lfdDetailBackgroundColorDesktop: $lfdDetailBackgroundColorDesktop,
    lfdDetailFontColor: $lfdDetailFontColor,
    lfdDetailFontColorTablet: $lfdDetailFontColorTablet,
    lfdDetailFontColorDesktop: $lfdDetailFontColorDesktop,
    lfdCommentsBackgroundColor: $lfdCommentsBackgroundColor,
    lfdCommentsBackgroundColorTablet: $lfdCommentsBackgroundColorTablet,
    lfdCommentsBackgroundColorDesktop: $lfdCommentsBackgroundColorDesktop,
    lfdCommentsFontColor: $lfdCommentsFontColor,
    lfdCommentsFontColorTablet: $lfdCommentsFontColorTablet,
    lfdCommentsFontColorDesktop: $lfdCommentsFontColorDesktop,
    lfdAgendaTopBackgroundColor: $lfdAgendaTopBackgroundColor,
    lfdAgendaTopBackgroundColorTablet: $lfdAgendaTopBackgroundColorTablet,
    lfdAgendaTopBackgroundColorDesktop: $lfdAgendaTopBackgroundColorDesktop,
    lfdAgendaTopTextColor: $lfdAgendaTopTextColor,
    lfdAgendaTopTextColorTablet: $lfdAgendaTopTextColorTablet,
    lfdAgendaTopTextColorDesktop: $lfdAgendaTopTextColorDesktop,
    lfdAgendaTopTextActiveColor: $lfdAgendaTopTextActiveColor,
    lfdAgendaTopTextActiveColorTablet: $lfdAgendaTopTextActiveColorTablet,
    lfdAgendaTopTextActiveColorDesktop: $lfdAgendaTopTextActiveColorDesktop,
    lfdAgendaDatesBackgroundColor: $lfdAgendaDatesBackgroundColor,
    lfdAgendaDatesBackgroundColorTablet: $lfdAgendaDatesBackgroundColorTablet,
    lfdAgendaDatesBackgroundColorDesktop: $lfdAgendaDatesBackgroundColorDesktop,
    lfdAgendaDatesFontColor: $lfdAgendaDatesFontColor,
    lfdAgendaDatesFontColorTablet: $lfdAgendaDatesFontColorTablet,
    lfdAgendaDatesFontColorDesktop: $lfdAgendaDatesFontColorDesktop,
    lfdChevronColor: $lfdChevronColor,
    lfdChevronColorTablet: $lfdChevronColorTablet,
    lfdChevronColorDesktop: $lfdChevronColorDesktop,
    lfdWidth: $lfdWidth,
    lfdWidthTablet: $lfdWidthTablet,
    lfdWidthDesktop: $lfdWidthDesktop,
    lfdMaxWidth: $lfdMaxWidth,
    lfdMaxWidthTablet: $lfdMaxWidthTablet,
    lfdMaxWidthDesktop: $lfdMaxWidthDesktop,
    lfdMarginTop: $lfdMarginTop,
    lfdMarginTopTablet: $lfdMarginTopTablet,
    lfdMarginTopDesktop: $lfdMarginTopDesktop,
    lfdMarginRight: $lfdMarginRight,
    lfdMarginRightTablet: $lfdMarginRightTablet,
    lfdMarginRightDesktop: $lfdMarginRightDesktop,
    lfdMarginBottom: $lfdMarginBottom,
    lfdMarginBottomTablet: $lfdMarginBottomTablet,
    lfdMarginBottomDesktop: $lfdMarginBottomDesktop,
    lfdMarginLeft: $lfdMarginLeft,
    lfdMarginLeftTablet: $lfdMarginLeftTablet,
    lfdMarginLeftDesktop: $lfdMarginLeftDesktop,
    lfdSeparatorWidth: $lfdSeparatorWidth,
    lfdSeparatorWidthTablet: $lfdSeparatorWidthTablet,
    lfdSeparatorWidthDesktop: $lfdSeparatorWidthDesktop,
    lfdSeparatorStyle: $lfdSeparatorStyle,
    lfdSeparatorStyleTablet: $lfdSeparatorStyleTablet,
    lfdSeparatorStyleDesktop: $lfdSeparatorStyleDesktop,
    lfdSeparatorColor: $lfdSeparatorColor,
    lfdSeparatorColorTablet: $lfdSeparatorColorTablet,
    lfdSeparatorColorDesktop: $lfdSeparatorColorDesktop,
    lfdVisibility: $lfdVisibility,
    lfdVisibilityTablet: $lfdVisibilityTablet,
    lfdVisibilityDesktop: $lfdVisibilityDesktop,
    lfdPosition: $lfdPosition,
    lfdPositionTop: $lfdPositionTop,
    lfdPositionRight: $lfdPositionRight,
    lfdPositionBottom: $lfdPositionBottom,
    lfdPositionLeft: $lfdPositionLeft,
    lfdIndex: $lfdIndex,
    lfdDisplay: $lfdDisplay,
    lfdPositionTablet: $lfdPositionTablet,
    lfdPositionTopTablet: $lfdPositionTopTablet,
    lfdPositionRightTablet: $lfdPositionRightTablet,
    lfdPositionBottomTablet: $lfdPositionBottomTablet,
    lfdPositionLeftTablet: $lfdPositionLeftTablet,
    lfdIndexTablet: $lfdIndexTablet,
    lfdDisplayTablet: $lfdDisplayTablet,
    lfdPositionDesktop: $lfdPositionDesktop,
    lfdPositionTopDesktop: $lfdPositionTopDesktop,
    lfdPositionRightDesktop: $lfdPositionRightDesktop,
    lfdPositionBottomDesktop: $lfdPositionBottomDesktop,
    lfdPositionLeftDesktop: $lfdPositionLeftDesktop,
    lfdIndexDesktop: $lfdIndexDesktop,
    lfdDisplayDesktop: $lfdDisplayDesktop
  ), $options);

  $instanceSelector: '[data-widget-package="com.fliplet.dynamic-lists"]';
  @if $widgetInstanceUUID != '' {
    $instanceSelector: '#{$instanceSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  } @else if $widgetInstanceId != '' {
    $instanceSelector: '#{$instanceSelector}[data-id="#{$widgetInstanceId}"]';
  }

  #{$instanceSelector} {
    position: map-get($configuration, lfdPosition) !important;
    z-index: map-get($configuration, lfdIndex);

    @if map-get($configuration, lfdPosition) == 'relative' {
      @if map-get($configuration, lfdVisibility) == 'visible' {
        display: map-get($configuration, lfdDisplay) !important;
      } @else {
        display: none !important;
      }
    } @else {
      @if map-get($configuration, lfdVisibility) == 'visible' {
        display: block !important;
      } @else {
        display: none !important;
      }

      top: map-get($configuration, lfdPositionTop);
      right: map-get($configuration, lfdPositionRight);
      bottom: map-get($configuration, lfdPositionBottom);
      left: map-get($configuration, lfdPositionLeft);
    }

    width: map-get($configuration, lfdWidth);
    max-width: map-get($configuration, lfdMaxWidth);
    margin: map-get($configuration, lfdMarginTop)
      map-get($configuration, lfdMarginRight)
      map-get($configuration, lfdMarginBottom)
      map-get($configuration, lfdMarginLeft);

    // Styles for tablet
    @include above($tabletBreakpoint) {
      position: map-get($configuration, lfdPositionTablet) !important;
      z-index: map-get($configuration, lfdIndexTablet);

      @if map-get($configuration, lfdPositionTablet) == 'relative' {
        @if map-get($configuration, lfdVisibilityTablet) == 'visible' {
          display: map-get($configuration, lfdDisplayTablet) !important;
        } @else {
          display: none !important;
        }
      } @else {
        @if map-get($configuration, lfdVisibilityTablet) == 'visible' {
          display: block !important;
        } @else {
          display: none !important;
        }

        top: map-get($configuration, lfdPositionTopTablet);
        right: map-get($configuration, lfdPositionRightTablet);
        bottom: map-get($configuration, lfdPositionBottomTablet);
        left: map-get($configuration, lfdPositionLeftTablet);
      }

      width: map-get($configuration, lfdWidthTablet);
      max-width: map-get($configuration, lfdMaxWidthTablet);
      margin: map-get($configuration, lfdMarginTopTablet)
        map-get($configuration, lfdMarginRightTablet)
        map-get($configuration, lfdMarginBottomTablet)
        map-get($configuration, lfdMarginLeftTablet);
    }

    // Styles for desktop
    @include above($desktopBreakpoint) {
      position: map-get($configuration, lfdPositionDesktop) !important;
      z-index: map-get($configuration, lfdIndexDesktop);

      @if map-get($configuration, lfdPositionDesktop) == 'relative' {
        @if map-get($configuration, lfdVisibilityDesktop) == 'visible' {
          display: map-get($configuration, lfdDisplayDesktop) !important;
        } @else {
          display: none !important;
        }
      } @else {
        @if map-get($configuration, lfdVisibilityDesktop) == 'visible' {
          display: block !important;
        } @else {
          display: none !important;
        }

        top: map-get($configuration, lfdPositionTopDesktop);
        right: map-get($configuration, lfdPositionRightDesktop);
        bottom: map-get($configuration, lfdPositionBottomDesktop);
        left: map-get($configuration, lfdPositionLeftDesktop);
      }

      width: map-get($configuration, lfdWidthDesktop);
      max-width: map-get($configuration, lfdMaxWidthDesktop);
      margin: map-get($configuration, lfdMarginTopDesktop)
        map-get($configuration, lfdMarginRightDesktop)
        map-get($configuration, lfdMarginBottomDesktop)
        map-get($configuration, lfdMarginLeftDesktop);
    }

    .new-small-card-list-container,
    .small-card-list-container {
      .small-card-list-detail-wrapper {
        background-color: map-get($configuration, lfdBackgroundColor);
      }

      .small-card-search-filter-overlay {
        .small-card-overlay-header {
          background-color: map-get($configuration, lfdOverlayBackgroundColor);
        }

        .small-card-overlay-wrapper {
          background-color: map-get($configuration, lfdOverlayBackgroundColor);
          color: map-get($configuration, lfdOverlayFontColor);
        }

        .hidden-filter-controls-filter {
          border-color: rgba(map-get($configuration, lfdOverlayFontColor), 0.8);

          &:hover,
          &:focus {
            color: rgba(map-get($configuration, lfdOverlayFontColor), 0.7);
          }
        }
      }

      .small-card-list-text-wrapper,
      .small-card-list-detail-content-wrapper {
        background-color: map-get($configuration, lfdBackgroundColor);
        color: map-get($configuration, lfdFontColor);
      }

      .small-card-list-name,
      .small-card-list-role,
      .small-card-list-location,
      .small-card-list-detail-role,
      .small-card-list-detail-location {
        color: map-get($configuration, lfdFontColor);
      }

      .small-card-list-detail-name {
        color: map-get($configuration, lfdFontColor);

        &:after {
          background-color: $highlightColor;
        }
      }

      .small-card-list-detail-button a {
        color: map-get($configuration, lfdFontColor);

        &:hover,
        &:focus,
        &:active,
        &:active:hover,
        &:active:focus {
          color: map-get($configuration, lfdFontColor);
        }
      }

      .small-card-list-detail-close-btn {
        color: map-get($configuration, lfdFontColor);
        background: rgba(map-get($configuration, lfdBackgroundColor), 0.5);
      }

      .small-card-list-detail-image-wrapper {
        color: rgba(map-get($configuration, lfdFontColor), 0.1);
        background-color: rgba(map-get($configuration, lfdFontColor), 0.04);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .small-card-list-detail-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorTablet);
        }

        .small-card-search-filter-overlay {
          .small-card-overlay-header {
            background-color: map-get($configuration, lfdOverlayBackgroundColorTablet);
          }

          .small-card-overlay-wrapper {
            background-color: map-get($configuration, lfdOverlayBackgroundColorTablet);
            color: map-get($configuration, lfdOverlayFontColorTablet);
          }

          .hidden-filter-controls-filter {
            border-color: rgba(map-get($configuration, lfdOverlayFontColorTablet), 0.8);

            &:hover,
            &:focus {
              color: rgba(map-get($configuration, lfdOverlayFontColorTablet), 0.7);
            }
          }
        }

        .small-card-list-text-wrapper,
        .small-card-list-detail-content-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorTablet);
          color: map-get($configuration, lfdFontColorTablet);
        }

        .small-card-list-name,
        .small-card-list-role,
        .small-card-list-location,
        .small-card-list-detail-role,
        .small-card-list-detail-location {
          color: map-get($configuration, lfdFontColorTablet);
        }

        .small-card-list-detail-name {
          color: map-get($configuration, lfdFontColorTablet);
        }

        .small-card-list-detail-button a {
          color: map-get($configuration, lfdFontColorTablet);

          &:hover,
          &:focus,
          &:active,
          &:active:hover,
          &:active:focus {
            color: map-get($configuration, lfdFontColorTablet);
          }
        }

        .small-card-list-detail-close-btn {
          color: map-get($configuration, lfdFontColorTablet);
          background: rgba(map-get($configuration, lfdBackgroundColorTablet), 0.5);
        }

        .small-card-list-detail-image-wrapper {
          color: rgba(map-get($configuration, lfdFontColorTablet), 0.1);
          background-color: rgba(map-get($configuration, lfdFontColorTablet), 0.04);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .small-card-list-detail-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorDesktop);
        }

        .small-card-search-filter-overlay {
          .small-card-overlay-header {
            background-color: map-get($configuration, lfdOverlayBackgroundColorDesktop);
          }

          .small-card-overlay-wrapper {
            background-color: map-get($configuration, lfdOverlayBackgroundColorDesktop);
            color: map-get($configuration, lfdOverlayFontColorDesktop);
          }

          .hidden-filter-controls-filter {
            border-color: rgba(map-get($configuration, lfdOverlayFontColorDesktop), 0.8);

            &:hover,
            &:focus {
              color: rgba(map-get($configuration, lfdOverlayFontColorDesktop), 0.7);
            }
          }
        }

        .small-card-list-text-wrapper,
        .small-card-list-detail-content-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorDesktop);
          color: map-get($configuration, lfdFontColorDesktop);
        }

        .small-card-list-name,
        .small-card-list-role,
        .small-card-list-location,
        .small-card-list-detail-role,
        .small-card-list-detail-location {
          color: map-get($configuration, lfdFontColorDesktop);
        }

        .small-card-list-detail-name {
          color: map-get($configuration, lfdFontColorDesktop);
        }

        .small-card-list-detail-button a {
          color: map-get($configuration, lfdFontColorDesktop);

          &:hover,
          &:focus,
          &:active,
          &:active:hover,
          &:active:focus {
            color: map-get($configuration, lfdFontColorDesktop);
          }
        }

        .small-card-list-detail-close-btn {
          color: map-get($configuration, lfdFontColorDesktop);
          background: rgba(map-get($configuration, lfdBackgroundColorDesktop), 0.5);
        }

        .small-card-list-detail-image-wrapper {
          color: rgba(map-get($configuration, lfdFontColorDesktop), 0.1);
          background-color: rgba(map-get($configuration, lfdFontColorDesktop), 0.04);
        }
      }
    }

    .new-small-card-list-container {
      .small-card-list-detail-wrapper.open {
        background-color: map-get($configuration, lfdDetailBackgroundColor);
      }

      .small-card-bookmark-holder {
        .fa-bookmark-o {
          color: rgba(map-get($configuration, lfdDetailFontColor), 0.2);
        }

        .fa-bookmark {
          color: $highlightColor;
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .small-card-list-detail-wrapper.open {
          background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
        }

        .small-card-bookmark-holder {
          .fa-bookmark-o {
            color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.2);
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .small-card-list-detail-wrapper.open {
          background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
        }

        .small-card-bookmark-holder {
          .fa-bookmark-o {
            color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.2);
          }
        }
      }
    }

    .small-card-detail-overlay {
      .small-card-detail-overlay-wrapper {
        .small-card-detail-overlay-panel {
          background-color: map-get($configuration, lfdDetailBackgroundColor);

          .small-card-detail-wrapper {
            .small-card-list-detail-content-wrapper {
              background-color: map-get($configuration, lfdDetailBackgroundColor);
              color: map-get($configuration, lfdDetailFontColor);

              .small-card-bookmark-holder {
                .fa-bookmark-o {
                  color: rgba(map-get($configuration, lfdDetailFontColor), 0.2);
                }

                .fa-bookmark {
                  color: $highlightColor;
                }
              }

              .small-card-list-name,
              .small-card-list-role,
              .small-card-list-location,
              .small-card-list-detail-role,
              .small-card-list-detail-location {
                color: map-get($configuration, lfdDetailFontColor);
              }

              .small-card-list-detail-name {
                color: map-get($configuration, lfdDetailFontColor);

                &:after {
                  background-color: $highlightColor;
                }
              }

              .small-card-list-detail-button a {
                color: map-get($configuration, lfdDetailFontColor);

                &:hover,
                &:focus,
                &:active,
                &:active:hover,
                &:active:focus {
                  color: map-get($configuration, lfdDetailFontColor);
                }
              }

              .small-card-detail-overlay-close {
                background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
                color: map-get($configuration, lfdDetailFontColor);
              }
            }

            .small-card-list-detail-image-wrapper {
              color: rgba(map-get($configuration, lfdDetailFontColor), 0.1);
              background-color: rgba(map-get($configuration, lfdDetailFontColor), 0.04);
            }
          }
        }

        .small-card-detail-overlay-close {
          background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
          color: map-get($configuration, lfdDetailFontColor);
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          .small-card-detail-overlay-panel {
            background-color: map-get($configuration, lfdDetailBackgroundColorTablet);

            .small-card-detail-wrapper {
              .small-card-list-detail-content-wrapper {
                background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
                color: map-get($configuration, lfdDetailFontColorTablet);

                .small-card-bookmark-holder {
                  .fa-bookmark-o {
                    color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.2);
                  }
                }

                .small-card-list-name,
                .small-card-list-role,
                .small-card-list-location,
                .small-card-list-detail-role,
                .small-card-list-detail-location {
                  color: map-get($configuration, lfdDetailFontColorTablet);
                }

                .small-card-list-detail-name {
                  color: map-get($configuration, lfdDetailFontColorTablet);
                }

                .small-card-list-detail-button a {
                  color: map-get($configuration, lfdDetailFontColorTablet);

                  &:hover,
                  &:focus,
                  &:active,
                  &:active:hover,
                  &:active:focus {
                    color: map-get($configuration, lfdDetailFontColorTablet);
                  }
                }

                .small-card-detail-overlay-close {
                  background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
                  color: map-get($configuration, lfdDetailFontColorTablet);
                }
              }

              .small-card-list-detail-image-wrapper {
                color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.1);
                background-color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.04);
              }
            }
          }

          .small-card-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
            color: map-get($configuration, lfdDetailFontColorTablet);
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          .small-card-detail-overlay-panel {
            background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);

            .small-card-detail-wrapper {
              .small-card-list-detail-content-wrapper {
                background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
                color: map-get($configuration, lfdDetailFontColorDesktop);

                .small-card-bookmark-holder {
                  .fa-bookmark-o {
                    color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.2);
                  }
                }

                .small-card-list-name,
                .small-card-list-role,
                .small-card-list-location,
                .small-card-list-detail-role,
                .small-card-list-detail-location {
                  color: map-get($configuration, lfdDetailFontColorDesktop);
                }

                .small-card-list-detail-name {
                  color: map-get($configuration, lfdDetailFontColorDesktop);
                }

                .small-card-list-detail-button a {
                  color: map-get($configuration, lfdDetailFontColorDesktop);

                  &:hover,
                  &:focus,
                  &:active,
                  &:active:hover,
                  &:active:focus {
                    color: map-get($configuration, lfdDetailFontColorDesktop);
                  }
                }

                .small-card-detail-overlay-close {
                  background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
                  color: map-get($configuration, lfdDetailFontColorDesktop);
                }
              }

              .small-card-list-detail-image-wrapper {
                color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.1);
                background-color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.04);
              }
            }
          }

          .small-card-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
            color: map-get($configuration, lfdDetailFontColorDesktop);
          }
        }
      }
    }

    .new-news-feed-list-container .news-feed-search-filter-overlay,
    .simple-list-container .simple-list-search-filter-overlay,
    .new-agenda-list-container .new-agenda-search-filter-overlay {
      .news-feed-overlay-wrapper,
      .simple-list-overlay-wrapper,
      .agenda-overlay-wrapper {
        background-color: map-get($configuration, lfdOverlayBackgroundColor);
        color: map-get($configuration, lfdOverlayFontColor);
      }

      .news-feed-overlay-header,
      .simple-list-overlay-header,
      .agenda-overlay-header {
        background-color: map-get($configuration, lfdOverlayBackgroundColor);
      }

      .hidden-filter-controls-filter {
        border-color: rgba(map-get($configuration, lfdOverlayFontColor), 0.8);

        &:hover,
        &:focus {
          color: rgba(map-get($configuration, lfdOverlayFontColor), 0.7);
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .news-feed-overlay-wrapper,
        .simple-list-overlay-wrapper,
        .agenda-overlay-wrapper {
          background-color: map-get($configuration, lfdOverlayBackgroundColorTablet);
          color: map-get($configuration, lfdOverlayFontColorTablet);
        }

        .news-feed-overlay-header,
        .simple-list-overlay-header,
        .agenda-overlay-header {
          background-color: map-get($configuration, lfdOverlayBackgroundColorTablet);
        }

        .hidden-filter-controls-filter {
          border-color: rgba(map-get($configuration, lfdOverlayFontColorTablet), 0.8);

          &:hover,
          &:focus {
            color: rgba(map-get($configuration, lfdOverlayFontColorTablet), 0.7);
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .news-feed-overlay-wrapper,
        .simple-list-overlay-wrapper,
        .agenda-overlay-wrapper {
          background-color: map-get($configuration, lfdOverlayBackgroundColorDesktop);
          color: map-get($configuration, lfdOverlayFontColorDesktop);
        }

        .news-feed-overlay-header,
        .simple-list-overlay-header,
        .agenda-overlay-header {
          background-color: map-get($configuration, lfdOverlayBackgroundColorDesktop);
        }

        .hidden-filter-controls-filter {
          border-color: rgba(map-get($configuration, lfdOverlayFontColorDesktop), 0.8);

          &:hover,
          &:focus {
            color: rgba(map-get($configuration, lfdOverlayFontColorDesktop), 0.7);
          }
        }
      }
    }

    .new-small-card-list-container,
    .small-card-list-container,
    .new-news-feed-list-container,
    .news-feed-list-container,
    .simple-list-container,
    .new-agenda-list-container {
      width: map-get($configuration, lfdWidth);
      max-width: map-get($configuration, lfdMaxWidth);
      margin: map-get($configuration, lfdMarginTop)
        map-get($configuration, lfdMarginRight)
        map-get($configuration, lfdMarginBottom)
        map-get($configuration, lfdMarginLeft);

      .news-feed-search-filter-overlay,
      .small-card-search-filter-overlay,
      .simple-list-search-filter-overlay,
      .new-agenda-search-filter-overlay {
        .apply-filters,
        .hidden-filter-controls-filter.mixitup-control-active {
          background-color: $highlightColor;
          color: $primaryButtonTextColor;
          border-color: $highlightColor;
        }
      }

      .filter-holder {
        .panel-default > .panel-heading {
          color: map-get($configuration, lfdOverlayFontColor);
          background-color: map-get($configuration, lfdOverlayBackgroundColor);
          border-bottom: 1px solid rgba(map-get($configuration, lfdOverlayFontColor), 0.2);
        }
        .panel-group .panel {
          background-color: lighten(map-get($configuration, lfdOverlayBackgroundColor), 10%);

          .panel-body {
            background-color: transparent;
          }
        }
      }

      // The use of !important in this case is to avoid CSS repetion
      // Some layouts on the LFD component have more specific targets

      .section-top-wrapper {
        .fa {
          color: $highlightColor;
        }
        .form-control {
          background-color: $bodyBackground;
          color: $bodyTextColor;

          &:focus {
            border-color: $highlightColor;
          }
        }
        .btn.search-btn {
          border: none;
          background-color: rgba($bodyTextColor, 0.1);
          color: $bodyTextColor;

          &:hover,
          &:active,
          &:active:hover {
            border: none;
          }
        }

        .search-feed:focus ~ .btn.search-btn {
          border: none;
        }

        .list-search-icon .fa {
          opacity: 1;
          color: $highlightColor !important;
        }

        & ~ .list-search-icon .fa {
          opacity: 1;
          color: $highlightColor !important;
        }
      }

      .hidden-search-controls .current-query-wrapper {
        border-color: $highlightColor;
        background-color: $highlightColor;
        color: $primaryButtonTextColor;

        &:hover,
        &:focus {
          color: rgba($primaryButtonTextColor, 0.7);
        }
      }

      .hidden-filter-controls-label,
      .search-query-holder {
        color: rgba($bodyTextColor, 0.5);
      }

      .hidden-filter-controls-filter {
        border-color: rgba($bodyTextColor, 0.8);

        &:hover,
        &:focus {
          color: rgba($bodyTextColor, 0.7);
        }

        &.mixitup-control-active {
          border-color: $highlightColor;
          background-color: $highlightColor;
          color: $primaryButtonTextColor;

          &:hover,
          &:focus {
            color: rgba($primaryButtonTextColor, 0.7);
          }
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        width: map-get($configuration, lfdWidthTablet);
        max-width: map-get($configuration, lfdMaxWidthTablet);
        margin: map-get($configuration, lfdMarginTopTablet)
          map-get($configuration, lfdMarginRightTablet)
          map-get($configuration, lfdMarginBottomTablet)
          map-get($configuration, lfdMarginLeftTablet);

        .news-feed-search-filter-overlay,
        .small-card-search-filter-overlay,
        .simple-list-search-filter-overlay,
        .new-agenda-search-filter-overlay {
          .apply-filters,
          .hidden-filter-controls-filter.mixitup-control-active {
            color: $primaryButtonTextColorTablet;
          }
        }

        .filter-holder {
          .panel-default > .panel-heading {
            color: map-get($configuration, lfdOverlayFontColorTablet);
            background-color: map-get($configuration, lfdOverlayBackgroundColorTablet);
            border-bottom: 1px solid rgba(map-get($configuration, lfdOverlayFontColorTablet), 0.2);
          }
          .panel-group .panel {
            background-color: lighten(map-get($configuration, lfdOverlayBackgroundColorTablet), 10%);

            .panel-body {
              background-color: transparent;
            }
          }
        }

        // The use of !important in this case is to avoid CSS repetion
        // Some layouts on the LFD component have more specific targets

        .search-holder {
          .form-control {
            background-color: $bodyBackgroundTablet;
            color: $bodyTextColorTablet;
          }
          .btn.search-btn {
            border: none;
            background-color: rgba($bodyTextColorTablet, 0.1);
            color: $bodyTextColorTablet;

            &:hover,
            &:active,
            &:active:hover {
              border: none;
            }
          }

          .search-feed:focus ~ .btn.search-btn {
            border: none;
          }

          .list-search-icon .fa {
            opacity: 1;
          }

          & ~ .list-search-icon .fa {
            opacity: 1;
          }
        }

        .hidden-search-controls .current-query-wrapper {
          color: $primaryButtonTextColorTablet;

          &:hover,
          &:focus {
            color: rgba($primaryButtonTextColorTablet, 0.7);
          }
        }

        .hidden-filter-controls-label,
        .search-query-holder {
          color: rgba($bodyTextColorTablet, 0.5);
        }

        .hidden-filter-controls-filter {
          border-color: rgba($bodyTextColorTablet, 0.8);

          &:hover,
          &:focus {
            color: rgba($bodyTextColorTablet, 0.7);
          }

          &.mixitup-control-active {
            color: $primaryButtonTextColorTablet;

            &:hover,
            &:focus {
              color: rgba($primaryButtonTextColorTablet, 0.7);
            }
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        width: map-get($configuration, lfdWidthDesktop);
        max-width: map-get($configuration, lfdMaxWidthDesktop);
        margin: map-get($configuration, lfdMarginTopDesktop)
          map-get($configuration, lfdMarginRightDesktop)
          map-get($configuration, lfdMarginBottomDesktop)
          map-get($configuration, lfdMarginLeftDesktop);

        .news-feed-search-filter-overlay,
        .small-card-search-filter-overlay,
        .simple-list-search-filter-overlay,
        .new-agenda-search-filter-overlay {
          .apply-filters,
          .hidden-filter-controls-filter.mixitup-control-active {
            color: $primaryButtonTextColorDesktop;
          }
        }

        .filter-holder {
          .panel-default > .panel-heading {
            color: map-get($configuration, lfdOverlayFontColorDesktop);
            background-color: map-get($configuration, lfdOverlayBackgroundColorDesktop);
            border-bottom: 1px solid rgba(map-get($configuration, lfdOverlayFontColorDesktop), 0.2);
          }
          .panel-group .panel {
            background-color: lighten(map-get($configuration, lfdOverlayBackgroundColorDesktop), 10%);

            .panel-body {
              background-color: transparent;
            }
          }
        }

        // The use of !important in this case is to avoid CSS repetion
        // Some layouts on the LFD component have more specific targets

        .search-holder {
          .form-control {
            background-color: $bodyBackgroundDesktop;
            color: $bodyTextColorDesktop;
          }
          .btn.search-btn {
            border: none;
            background-color: rgba($bodyTextColorDesktop, 0.1);
            color: $bodyTextColorDesktop;

            &:hover,
            &:active,
            &:active:hover {
              border: none;
            }
          }

          .search-feed:focus ~ .btn.search-btn {
            border: none;
          }

          .list-search-icon .fa {
            opacity: 1;
          }

          & ~ .list-search-icon .fa {
            opacity: 1;
          }
        }

        .hidden-search-controls .current-query-wrapper {
          color: $primaryButtonTextColorDesktop;

          &:hover,
          &:focus {
            color: rgba($primaryButtonTextColorDesktop, 0.7);
          }
        }

        .hidden-filter-controls-label,
        .search-query-holder {
          color: rgba($bodyTextColorDesktop, 0.5);
        }

        .hidden-filter-controls-filter {
          border-color: rgba($bodyTextColorDesktop, 0.8);

          &:hover,
          &:focus {
            color: rgba($bodyTextColorDesktop, 0.7);
          }

          &.mixitup-control-active {
            color: $primaryButtonTextColorDesktop;

            &:hover,
            &:focus {
              color: rgba($primaryButtonTextColorDesktop, 0.7);
            }
          }
        }
      }
    }

    /* NEWS FEED */
    .new-news-feed-list-container,
    .news-feed-list-container {
      .slide-over {
        .news-feed-item-inner-content {
          background-color: map-get($configuration, lfdBackgroundColor);
          color: map-get($configuration, lfdFontColor);

          h2.news-feed-item-title {
            color: map-get($configuration, lfdFontColor);

            &:after {
              background-color: $highlightColor;
            }
          }
        }
      }

      .news-feed-list-item {
        .news-feed-item-close-btn {
          background-color: rgba(map-get($configuration, lfdBackgroundColor), 0.5);
          color: map-get($configuration, lfdFontColor);
        }

        &.open{
          .news-feed-item-content {
            background-color: map-get($configuration, lfdBackgroundColor);
          }
        }
      }

      .news-feed-item-content {
        .slide-under {
          color: rgba(map-get($configuration, lfdFontColor), 0.1);
          background-color: rgba(map-get($configuration, lfdFontColor), 0.04);
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .slide-over {
          .news-feed-item-inner-content {
            background-color: map-get($configuration, lfdBackgroundColorTablet);
            color: map-get($configuration, lfdFontColorTablet);

            h2.news-feed-item-title {
              color: map-get($configuration, lfdFontColorTablet);
            }
          }
        }

        .news-feed-list-item {
          .news-feed-item-close-btn {
            background-color: rgba(map-get($configuration, lfdBackgroundColorTablet), 0.5);
            color: map-get($configuration, lfdFontColorTablet);
          }

          &.open{
            .news-feed-item-content {
              background-color: map-get($configuration, lfdBackgroundColorTablet);
            }
          }
        }

        .news-feed-item-content {
          .slide-under {
            color: rgba(map-get($configuration, lfdFontColorTablet), 0.1);
            background-color: rgba(map-get($configuration, lfdFontColorTablet), 0.04);
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .slide-over {
          .news-feed-item-inner-content {
            background-color: map-get($configuration, lfdBackgroundColorDesktop);
            color: map-get($configuration, lfdFontColorDesktop);

            h2.news-feed-item-title {
              color: map-get($configuration, lfdFontColorDesktop);
            }
          }
        }

        .news-feed-list-item {
          .news-feed-item-close-btn {
            background-color: rgba(map-get($configuration, lfdBackgroundColorDesktop), 0.5);
            color: map-get($configuration, lfdFontColorDesktop);
          }

          &.open{
            .news-feed-item-content {
              background-color: map-get($configuration, lfdBackgroundColorDesktop);
            }
          }
        }

        .news-feed-item-content {
          .slide-under {
            color: rgba(map-get($configuration, lfdFontColorDesktop), 0.1);
            background-color: rgba(map-get($configuration, lfdFontColorDesktop), 0.04);
          }
        }
      }
    }

    .news-feed-detail-overlay {
      .news-feed-detail-overlay-wrapper {
        .news-feed-detail-overlay-panel {
          background-color: map-get($configuration, lfdDetailBackgroundColor);
        }

        .news-feed-item-inner-content {
          background-color: map-get($configuration, lfdDetailBackgroundColor);
          color: map-get($configuration, lfdDetailFontColor);

          h2.news-feed-item-title {
            color: map-get($configuration, lfdDetailFontColor);

            &:after {
              background-color: $highlightColor;
            }
          }
        }

        .news-feed-list-detail-image-wrapper {
          color: rgba(map-get($configuration, lfdDetailFontColor), 0.1);
          background-color: rgba(map-get($configuration, lfdDetailFontColor), 0.04);
        }

        .news-feed-detail-overlay-close {
          background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
          color: map-get($configuration, lfdDetailFontColor);
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          .news-feed-detail-overlay-panel {
            background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
          }

          .news-feed-item-inner-content {
            background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
            color: map-get($configuration, lfdDetailFontColorTablet);

            h2.news-feed-item-title {
              color: map-get($configuration, lfdDetailFontColorTablet);
            }
          }

          .news-feed-list-detail-image-wrapper {
            color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.1);
            background-color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.04);
          }

          .news-feed-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
            color: map-get($configuration, lfdDetailFontColorTablet);
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          .news-feed-detail-overlay-panel {
            background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
          }

          .news-feed-item-inner-content {
            background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
            color: map-get($configuration, lfdDetailFontColorDesktop);

            h2.news-feed-item-title {
              color: map-get($configuration, lfdDetailFontColorDesktop);
            }
          }

          .news-feed-list-detail-image-wrapper {
            color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.1);
            background-color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.04);
          }

          .news-feed-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
            color: map-get($configuration, lfdDetailFontColorDesktop);
          }
        }
      }
    }

    /* COMMENTS */
    .news-feed-comment-panel,
    .new-news-feed-comment-panel,
    .simple-list-comment-panel {
      background: map-get($configuration, lfdCommentsBackgroundColor);

      .loading-holder {
        color: rgba(map-get($configuration, lfdCommentsFontColor), 0.4);
      }

      .comments-offline {
        background-color: rgba(map-get($configuration, lfdCommentsFontColor), 0.4);
        color: map-get($configuration, lfdCommentsFontColor);
      }

      .news-feed-comment-panel-header,
      .simple-list-comment-panel-header {
        background-color: map-get($configuration, lfdCommentsBackgroundColor);
        color: map-get($configuration, lfdCommentsFontColor);
      }

      .news-feed-comment-input-holder,
      .simple-list-comment-input-holder {
        background: map-get($configuration, lfdCommentsBackgroundColor);
        border-color: rgba(map-get($configuration, lfdCommentsFontColor), 0.1);

        .cancel {
          color: rgba(map-get($configuration, lfdCommentsFontColor), 0.7);

          &:hover,
          &:focus,
          &:active:hover,
          &:active:focus {
            color: rgba(map-get($configuration, lfdCommentsFontColor), 0.7);
          }
        }

        .btn.comment,
        .btn.save {
          border-color: rgba(map-get($configuration, lfdCommentsFontColor), 0.3);
          color: rgba(map-get($configuration, lfdCommentsFontColor),0.3);
        }

        &.ready {
          .btn.comment,
          .btn.save {
            border-color: $highlightColor;
            background-color: $highlightColor;
            color: $primaryButtonTextColor;
          }
        }
      }

      .top-comment-holder {
        background-color: map-get($configuration, lfdCommentsBackgroundColor);
      }

      .fl-individual-comment.editing .top-comment-holder {
        background-color: rgba(map-get($configuration, lfdCommentsFontColor), 0.08);
      }

      .fl-comment-thumb {
        background-color: rgba(map-get($configuration, lfdCommentsFontColor), 0.04);
      }

      textarea[data-comment-body] {
        background-color: transparent;
        color: map-get($configuration, lfdCommentsFontColor);

        ~ .typeahead.dropdown-menu {
          border-color: rgba(map-get($configuration, lfdCommentsFontColor),0.1);

          > .active > a {
            background-color: $highlightColor;
            color: $primaryButtonTextColor;
          }
        }
      }

      .active .mention_username{
        color: $primaryButtonTextColor;
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background: map-get($configuration, lfdCommentsBackgroundColorTablet);

        .loading-holder {
          color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.4);
        }

        .comments-offline {
          background-color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.4);
          color: map-get($configuration, lfdCommentsFontColorTablet);
        }

        .news-feed-comment-panel-header,
        .simple-list-comment-panel-header {
          background-color: map-get($configuration, lfdCommentsBackgroundColorTablet);
          color: map-get($configuration, lfdCommentsFontColorTablet);
        }

        .news-feed-comment-input-holder,
        .simple-list-comment-input-holder {
          background: map-get($configuration, lfdCommentsBackgroundColorTablet);
          border-color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.1);

          .cancel {
            color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.7);

            &:hover,
            &:focus,
            &:active:hover,
            &:active:focus {
              color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.7);
            }
          }

          .btn.comment,
          .btn.save {
            border-color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.3);
            color: rgba(map-get($configuration, lfdCommentsFontColorTablet),0.3);
          }

          &.ready {
            .btn.comment,
            .btn.save {
              color: $primaryButtonTextColorTablet;
            }
          }
        }

        .top-comment-holder {
          background-color: map-get($configuration, lfdCommentsBackgroundColorTablet);
        }

        .fl-individual-comment.editing .top-comment-holder {
          background-color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.08);
        }

        .fl-comment-thumb {
          background-color: rgba(map-get($configuration, lfdCommentsFontColorTablet), 0.04);
        }

        textarea[data-comment-body] {
          background-color: transparent;
          color: map-get($configuration, lfdCommentsFontColorTablet);

          ~ .typeahead.dropdown-menu {
            border-color: rgba(map-get($configuration, lfdCommentsFontColorTablet),0.1);

            > .active > a {
              color: $primaryButtonTextColorTablet;
            }
          }
        }

        .active .mention_username{
          color: $primaryButtonTextColorTablet;
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background: map-get($configuration, lfdCommentsBackgroundColorDesktop);

        .loading-holder {
          color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.4);
        }

        .comments-offline {
          background-color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.4);
          color: map-get($configuration, lfdCommentsFontColorDesktop);
        }

        .news-feed-comment-panel-header,
        .simple-list-comment-panel-header {
          background-color: map-get($configuration, lfdCommentsBackgroundColorDesktop);
          color: map-get($configuration, lfdCommentsFontColorDesktop);
        }

        .news-feed-comment-input-holder,
        .simple-list-comment-input-holder {
          background: map-get($configuration, lfdCommentsBackgroundColorDesktop);
          border-color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.1);

          .cancel {
            color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.7);

            &:hover,
            &:focus,
            &:active:hover,
            &:active:focus {
              color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.7);
            }
          }

          .btn.comment,
          .btn.save {
            border-color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.3);
            color: rgba(map-get($configuration, lfdCommentsFontColorDesktop),0.3);
          }

          &.ready {
            .btn.comment,
            .btn.save {
              color: $primaryButtonTextColorDesktop;
            }
          }
        }

        .top-comment-holder {
          background-color: map-get($configuration, lfdCommentsBackgroundColorDesktop);
        }

        .fl-individual-comment.editing .top-comment-holder {
          background-color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.08);
        }

        .fl-comment-thumb {
          background-color: rgba(map-get($configuration, lfdCommentsFontColorDesktop), 0.04);
        }

        textarea[data-comment-body] {
          background-color: transparent;
          color: map-get($configuration, lfdCommentsFontColorDesktop);

          ~ .typeahead.dropdown-menu {
            border-color: rgba(map-get($configuration, lfdCommentsFontColorDesktop),0.1);

            > .active > a {
              color: $primaryButtonTextColorDesktop;
            }
          }
        }

        .active .mention_username{
          color: $primaryButtonTextColorDesktop;
        }
      }
    }

    /* AGENDA */
    .agenda-detail-overlay {
      .agenda-detail-overlay-panel {
        background-color: map-get($configuration, lfdDetailBackgroundColor);
        color: map-get($configuration, lfdDetailFontColor);

        .agenda-detail-overlay-close {
          background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
          color: map-get($configuration, lfdDetailFontColor);
        }

        .agenda-item-content-holder {
          .agenda-item-time {
            color: map-get($configuration, lfdDetailFontColor);
          }

          .agenda-item-session-location {
            color: map-get($configuration, lfdDetailFontColor);
          }

          h2.agenda-item-title {
            color: map-get($configuration, lfdDetailFontColor);

            &:after {
              background-color: $highlightColor;
            }
          }

          .agenda-item-bookmark-holder {
            .fa-bookmark-o {
              color: rgba(map-get($configuration, lfdDetailFontColor), 0.2);

              &:after {
                color: rgba(map-get($configuration, lfdDetailFontColor), 0.5);
              }
            }
          }

          .bookmark-wrapper {
            .fa-bookmark-o {
              color: rgba(map-get($configuration, lfdDetailFontColor), 0.2);

              &:after {
                color: rgba(map-get($configuration, lfdDetailFontColor), 0.5);
              }
            }
          }
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
          color: map-get($configuration, lfdDetailFontColorTablet);

          .agenda-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
            color: map-get($configuration, lfdDetailFontColorTablet);
          }

          .agenda-item-content-holder {
            .agenda-item-time {
              color: map-get($configuration, lfdDetailFontColorTablet);
            }

            .agenda-item-session-location {
              color: map-get($configuration, lfdDetailFontColorTablet);
            }

            h2.agenda-item-title {
              color: map-get($configuration, lfdDetailFontColorTablet);
            }

            .agenda-item-bookmark-holder {
              .fa-bookmark-o {
                color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.2);

                &:after {
                  color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.5);
                }
              }
            }

            .bookmark-wrapper {
              .fa-bookmark-o {
                color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.2);

                &:after {
                  color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.5);
                }
              }
            }
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
          color: map-get($configuration, lfdDetailFontColorDesktop);

          .agenda-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
            color: map-get($configuration, lfdDetailFontColorDesktop);
          }

          .agenda-item-content-holder {
            .agenda-item-time {
              color: map-get($configuration, lfdDetailFontColorDesktop);
            }

            .agenda-item-session-location {
              color: map-get($configuration, lfdDetailFontColorDesktop);
            }

            h2.agenda-item-title {
              color: map-get($configuration, lfdDetailFontColorDesktop);
            }

            .agenda-item-bookmark-holder {
              .fa-bookmark-o {
                color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.2);

                &:after {
                  color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.5);
                }
              }
            }

            .bookmark-wrapper {
              .fa-bookmark-o {
                color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.2);

                &:after {
                  color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.5);
                }
              }
            }
          }
        }
      }
    }

    .new-agenda-list-container {
      .agenda-date-selector {
        background-color: map-get($configuration, lfdAgendaTopBackgroundColor);

        ul {
          li {
            color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.5);

            .day {
              color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.7);
            }

            &.placeholder {
              color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.1);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.1);
              }
            }
            &.active {
              color: rgba(map-get($configuration, lfdAgendaTopTextActiveColor), 0.5);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextActiveColor), 1);
              }
            }
          }
        }
      }

      .search-results-list-date {
        color: rgba(map-get($configuration, lfdAgendaTopTextActiveColor), 1);
      }

      .agenda-list-item {
        .slide-over {
          .agenda-item-inner-content {
            background-color: map-get($configuration, lfdBackgroundColor);

            .agenda-item-time {
              color: map-get($configuration, lfdFontColor);
            }

            .agenda-item-session-location {
              color: map-get($configuration, lfdFontColor);
            }

            h2.agenda-item-title {
              color: map-get($configuration, lfdFontColor);
            }
          }
        }

        &.open {
          .slide-over {
            .agenda-item-inner-content {
              h2.agenda-item-title {
                &:after {
                  background-color: $highlightColor;
                }
              }
            }
          }
        }
      }

      .agenda-item-bookmark-holder {
        color: map-get($configuration, lfdFontColor);

        .fa-bookmark-o {
          color: rgba(map-get($configuration, lfdFontColor), 0.2);
        }
      }

      .bookmark-wrapper {
        .fa-bookmark-o {
          color: rgba(map-get($configuration, lfdFontColor), 0.2);

          &:after {
            color: rgba(map-get($configuration, lfdFontColor), 0.5);
          }
        }

        .fa-bookmark {
          color: $highlightColor;
        }
      }

      .agenda-list-item-content {
        .slide-over {
          background-color: map-get($configuration, lfdDetailBackgroundColor);
        }
      }

      .agenda-list-controls {
        background-color: map-get($configuration, lfdAgendaDatesBackgroundColor);

        .toggle-agenda {
          .fa {
            color: map-get($configuration, lfdAgendaDatesFontColor);
          }

          &.mixitup-control-active {
            .fa {
              color: $highlightColor;
            }
          }
        }

        .agenda-list-label {
          color: map-get($configuration, lfdAgendaDatesFontColor);
        }
      }

      .agenda-list-item {
        .agenda-item-close-btn {
          background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
          color: map-get($configuration, lfdDetailFontColor);
        }
      }

      .agenda-state-messages {
        .loading-holder,
        .offline-holder {
          color: map-get($configuration, lfdDetailFontColor);
        }
      }

      .agenda-list-card-holder.empty + .agenda-item-empty-state {
        color: map-get($configuration, lfdDetailFontColor);
      }

      .section-top-wrapper,
      .hidden-controls,
      .agenda-list-card-holder,
      .agenda-list-item-content .container-fluid,
      .search-results,
      .agenda-detail-overlay-panel {
        max-width: map-get($configuration, lfdMaxWidth);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .agenda-date-selector {
          background-color: map-get($configuration, lfdAgendaTopBackgroundColorTablet);

          ul {
            li {
              color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.5);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.7);
              }

              &.placeholder {
                color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.1);

                .day {
                  color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.1);
                }
              }

              &.active {
                color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorTablet), 0.5);

                .day {
                  color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorTablet), 1);
                }
              }
            }
          }
        }

        .search-results-list-date {
          color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorTablet), 1);
        }

        .agenda-list-item {
          .slide-over {
            .agenda-item-inner-content {
              background-color: map-get($configuration, lfdBackgroundColorTablet);

              .agenda-item-time {
                color: map-get($configuration, lfdFontColorTablet);
              }

              .agenda-item-session-location {
                color: map-get($configuration, lfdFontColorTablet);
              }

              h2.agenda-item-title {
                color: map-get($configuration, lfdFontColorTablet);
              }
            }
          }
        }

        .agenda-item-bookmark-holder {
          color: map-get($configuration, lfdFontColorTablet);

          .fa-bookmark-o {
            color: rgba(map-get($configuration, lfdFontColorTablet), 0.2);
          }
        }

        .bookmark-wrapper {
          .fa-bookmark-o {
            color: rgba(map-get($configuration, lfdFontColorTablet), 0.2);

            &:after {
              color: rgba(map-get($configuration, lfdFontColorTablet), 0.5);
            }
          }
        }

        .agenda-list-item-content {
          .slide-over {
            background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
          }
        }

        .agenda-list-controls {
          background-color: map-get($configuration, lfdAgendaDatesBackgroundColorTablet);

          .toggle-agenda {
            .fa {
              color: map-get($configuration, lfdAgendaDatesFontColorTablet);
            }
          }

          .agenda-list-label {
            color: map-get($configuration, lfdAgendaDatesFontColorTablet);
          }
        }

        .agenda-list-item {
          .agenda-item-close-btn {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
            color: map-get($configuration, lfdDetailFontColorTablet);
          }
        }

        .agenda-state-messages {
          .loading-holder,
          .offline-holder {
            color: map-get($configuration, lfdDetailFontColorTablet);
          }
        }

        .agenda-list-card-holder.empty + .agenda-item-empty-state {
          color: map-get($configuration, lfdDetailFontColorTablet);
        }

        .section-top-wrapper,
        .hidden-controls,
        .agenda-list-card-holder,
        .agenda-list-item-content .container-fluid,
        .search-results,
        .agenda-detail-overlay-panel {
          max-width: map-get($configuration, lfdMaxWidthTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .agenda-date-selector {
          background-color: map-get($configuration, lfdAgendaTopBackgroundColorDesktop);

          ul {
            li {
              color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.5);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.7);
              }

              &.placeholder {
                color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.1);

                .day {
                  color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.1);
                }
              }

              &.active {
                color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorDesktop), 0.5);

                .day {
                  color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorDesktop), 1);
                }
              }
            }
          }
        }

        .search-results-list-date {
          color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorDesktop), 1);
        }

        .agenda-list-item {
          .slide-over {
            .agenda-item-inner-content {
              background-color: map-get($configuration, lfdBackgroundColorDesktop);

              .agenda-item-time {
                color: map-get($configuration, lfdFontColorDesktop);
              }

              .agenda-item-session-location {
                color: map-get($configuration, lfdFontColorDesktop);
              }

              h2.agenda-item-title {
                color: map-get($configuration, lfdFontColorDesktop);
              }
            }
          }
        }

        .agenda-item-bookmark-holder {
          color: map-get($configuration, lfdFontColorDesktop);

          .fa-bookmark-o {
            color: rgba(map-get($configuration, lfdFontColorDesktop), 0.2);
          }
        }

        .bookmark-wrapper {
          .fa-bookmark-o {
            color: rgba(map-get($configuration, lfdFontColorDesktop), 0.2);

            &:after {
              color: rgba(map-get($configuration, lfdFontColorDesktop), 0.5);
            }
          }
        }

        .agenda-list-item-content {
          .slide-over {
            background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
          }
        }

        .agenda-list-controls {
          background-color: map-get($configuration, lfdAgendaDatesBackgroundColorDesktop);

          .toggle-agenda {
            .fa {
              color: map-get($configuration, lfdAgendaDatesFontColorDesktop);
            }
          }

          .agenda-list-label {
            color: map-get($configuration, lfdAgendaDatesFontColorDesktop);
          }
        }

        .agenda-list-item {
          .agenda-item-close-btn {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
            color: map-get($configuration, lfdDetailFontColorDesktop);
          }
        }

        .agenda-state-messages {
          .loading-holder,
          .offline-holder {
            color: map-get($configuration, lfdDetailFontColorDesktop);
          }
        }

        .agenda-list-card-holder.empty + .agenda-item-empty-state {
          color: map-get($configuration, lfdDetailFontColorDesktop);
        }

        .section-top-wrapper,
        .hidden-controls,
        .agenda-list-card-holder,
        .agenda-list-item-content .container-fluid,
        .search-results,
        .agenda-detail-overlay-panel {
          max-width: map-get($configuration, lfdMaxWidthDesktop);
        }
      }
    }

    /* Old Agenda */
    .agenda-date-selector {
      background-color: map-get($configuration, lfdAgendaTopBackgroundColor);

      ul {
        li {
          color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.5);

          .day {
            color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.7);
          }

          &.placeholder {
            color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.1);

            .day {
              color: rgba(map-get($configuration, lfdAgendaTopTextColor), 0.1);
            }
          }

          &.active {
            color: rgba(map-get($configuration, lfdAgendaTopTextActiveColor), 0.5);

            .day {
              color: rgba(map-get($configuration, lfdAgendaTopTextActiveColor), 1);
            }
          }
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, lfdAgendaTopBackgroundColorTablet);

        ul {
          li {
            color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.5);

            .day {
              color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.7);
            }

            &.placeholder {
              color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.1);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextColorTablet), 0.1);
              }
            }

            &.active {
              color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorTablet), 0.5);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorTablet), 1);
              }
            }
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, lfdAgendaTopBackgroundColorDesktop);

        ul {
          li {
            color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.5);

            .day {
              color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.7);
            }

            &.placeholder {
              color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.1);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextColorDesktop), 0.1);
              }
            }

            &.active {
              color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorDesktop), 0.5);

              .day {
                color: rgba(map-get($configuration, lfdAgendaTopTextActiveColorDesktop), 1);
              }
            }
          }
        }
      }
    }

    .agenda-list-item {
      .slide-over {
        .agenda-item-inner-content {
          background-color: map-get($configuration, lfdBackgroundColor);

          .agenda-item-time {
            color: map-get($configuration, lfdFontColor);
          }

          .agenda-item-session-location {
            color: map-get($configuration, lfdFontColor);
          }

          h2.agenda-item-title {
            color: map-get($configuration, lfdFontColor);
          }
        }
      }

      &.open {
        .slide-over {
          .agenda-item-inner-content {
            h2.agenda-item-title {
              &:after {
                background-color: $highlightColor;
              }
            }
          }
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .slide-over {
          .agenda-item-inner-content {
            background-color: map-get($configuration, lfdBackgroundColorTablet);

            .agenda-item-time {
              color: map-get($configuration, lfdFontColorTablet);
            }

            .agenda-item-session-location {
              color: map-get($configuration, lfdFontColorTablet);
            }

            h2.agenda-item-title {
              color: map-get($configuration, lfdFontColorTablet);
            }
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .slide-over {
          .agenda-item-inner-content {
            background-color: map-get($configuration, lfdBackgroundColorDesktop);

            .agenda-item-time {
              color: map-get($configuration, lfdFontColorDesktop);
            }

            .agenda-item-session-location {
              color: map-get($configuration, lfdFontColorDesktop);
            }

            h2.agenda-item-title {
              color: map-get($configuration, lfdFontColorDesktop);
            }
          }
        }
      }
    }

    .agenda-item-bookmark-holder {
      color: map-get($configuration, lfdFontColor);

      .fa-bookmark-o {
        color: rgba(map-get($configuration, lfdFontColor), 0.2);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, lfdFontColorTablet);

        .fa-bookmark-o {
          color: rgba(map-get($configuration, lfdFontColorTablet), 0.2);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, lfdFontColorDesktop);

        .fa-bookmark-o {
          color: rgba(map-get($configuration, lfdFontColorDesktop), 0.2);
        }
      }
    }

    .bookmark-wrapper {
      .fa-bookmark-o {
        color: rgba(map-get($configuration, lfdFontColor), 0.2);

        &:after {
          color: rgba(map-get($configuration, lfdFontColor), 0.5);
        }
      }

      .fa-bookmark {
        color: $highlightColor;
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .fa-bookmark-o {
          color: rgba(map-get($configuration, lfdFontColorTablet), 0.2);

          &:after {
            color: rgba(map-get($configuration, lfdFontColorTablet), 0.5);
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .fa-bookmark-o {
          color: rgba(map-get($configuration, lfdFontColorDesktop), 0.2);

          &:after {
            color: rgba(map-get($configuration, lfdFontColorDesktop), 0.5);
          }
        }
      }
    }

    .agenda-list-item-content {
      .slide-over {
        background-color: map-get($configuration, lfdBackgroundColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .slide-over {
          background-color: map-get($configuration, lfdBackgroundColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .slide-over {
          background-color: map-get($configuration, lfdBackgroundColorDesktop);
        }
      }
    }

    .agenda-list-controls {
      background-color: map-get($configuration, lfdAgendaDatesBackgroundColor);

      .toggle-agenda {
        .fa {
          color: map-get($configuration, lfdAgendaDatesFontColor);
        }

        &.mixitup-control-active {
          .fa {
            color: map-get($configuration, lfdAgendaDatesFontColor);
          }
        }
      }

      .agenda-list-label {
        color: map-get($configuration, lfdDetailFontColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, lfdAgendaDatesBackgroundColorTablet);

        .toggle-agenda {
          .fa {
            color: map-get($configuration, lfdAgendaDatesFontColorTablet);
          }

          &.mixitup-control-active {
            .fa {
              color: map-get($configuration, lfdAgendaDatesFontColorTablet);
            }
          }
        }

        .agenda-list-label {
          color: map-get($configuration, lfdDetailFontColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, lfdAgendaDatesBackgroundColorDesktop);

        .toggle-agenda {
          .fa {
            color: map-get($configuration, lfdAgendaDatesFontColorDesktop);
          }

          &.mixitup-control-active {
            .fa {
              color: map-get($configuration, lfdAgendaDatesFontColorDesktop);
            }
          }
        }

        .agenda-list-label {
          color: map-get($configuration, lfdDetailFontColorDesktop);
        }
      }
    }

    .agenda-list-item {
      .agenda-item-close-btn {
        background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
        color: map-get($configuration, lfdDetailFontColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .agenda-item-close-btn {
          background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
          color: map-get($configuration, lfdDetailFontColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .agenda-item-close-btn {
          background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
          color: map-get($configuration, lfdDetailFontColorDesktop);
        }
      }
    }

    .agenda-state-messages {
      .loading-holder,
      .offline-holder {
        color: map-get($configuration, lfdFontColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .loading-holder,
        .offline-holder {
          color: map-get($configuration, lfdFontColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .loading-holder,
        .offline-holder {
          color: map-get($configuration, lfdFontColorDesktop);
        }
      }
    }

    .agenda-list-card-holder.empty + .agenda-item-empty-state {
      color: map-get($configuration, lfdFontColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, lfdFontColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, lfdFontColorDesktop);
      }
    }

    /* SMALL HORIZONTAL CARDS */
    .new-small-h-card-list-container,
    .small-h-card-list-container {
      .loading-data {
        color: map-get($configuration, lfdFontColor);
      }

      .small-h-card-list-item-text {
        color: map-get($configuration, lfdFontColor);
      }

      .small-h-card-list-detail-content-wrapper {
        background-color: map-get($configuration, lfdBackgroundColor);
      }

      .small-h-card-list-detail-name {
        color: map-get($configuration, lfdFontColor);

        &:after {
          background-color: $highlightColor;
        }
      }

      .small-h-card-list-detail-role,
      .small-h-card-list-detail-location {
        color: map-get($configuration, lfdFontColor);
      }

      .small-h-card-list-detail-button {
        a {
          color: map-get($configuration, lfdFontColor);

          &:hover,
          &:focus,
          &:active,
          &:active:hover,
          &:active:focus {
            color: map-get($configuration, lfdFontColor);
          }
        }
      }

      .small-h-card-list-detail-wrapper {
        background-color: map-get($configuration, lfdBackgroundColor);
      }

      .small-h-card-list-detail-image-wrapper {
        color: rgba($bodyTextColor, 0.1);
        background-color: rgba(map-get($configuration, lfdFontColor), 0.04);
      }

      .small-h-card-list-detail-close-btn {
        background-color: rgba(map-get($configuration, lfdBackgroundColor), 0.5);
        color: map-get($configuration, lfdFontColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .loading-data {
          color: map-get($configuration, lfdFontColorTablet);
        }

        .small-h-card-list-detail-content-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorTablet);
        }

        .small-h-card-list-detail-name {
          color: map-get($configuration, lfdFontColorTablet);
        }

        .small-h-card-list-detail-role,
        .small-h-card-list-detail-location {
          color: map-get($configuration, lfdFontColorTablet);
        }

        .small-h-card-list-detail-button {
          a {
            color: map-get($configuration, lfdFontColorTablet);

            &:hover,
            &:focus,
            &:active,
            &:active:hover,
            &:active:focus {
              color: map-get($configuration, lfdFontColorTablet);
            }
          }
        }

        .small-h-card-list-detail-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorTablet);
        }

        .small-h-card-list-detail-image-wrapper {
          color: rgba($bodyTextColorTablet, 0.1);
          background-color: rgba(map-get($configuration, lfdFontColorTablet), 0.04);
        }

        .small-h-card-list-detail-close-btn {
          background-color: rgba(map-get($configuration, lfdBackgroundColorTablet), 0.5);
          color: map-get($configuration, lfdFontColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .loading-data {
          color: map-get($configuration, lfdFontColorDesktop);
        }

        .small-h-card-list-detail-content-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorDesktop);
        }

        .small-h-card-list-detail-name {
          color: map-get($configuration, lfdFontColorDesktop);
        }

        .small-h-card-list-detail-role,
        .small-h-card-list-detail-location {
          color: map-get($configuration, lfdFontColorDesktop);
        }

        .small-h-card-list-detail-button {
          a {
            color: map-get($configuration, lfdFontColorDesktop);

            &:hover,
            &:focus,
            &:active,
            &:active:hover,
            &:active:focus {
              color: map-get($configuration, lfdFontColorDesktop);
            }
          }
        }

        .small-h-card-list-detail-wrapper {
          background-color: map-get($configuration, lfdBackgroundColorDesktop);
        }

        .small-h-card-list-detail-image-wrapper {
          color: rgba($bodyTextColorDesktop, 0.1);
          background-color: rgba(map-get($configuration, lfdFontColorDesktop), 0.04);
        }

        .small-h-card-list-detail-close-btn {
          background-color: rgba(map-get($configuration, lfdBackgroundColorDesktop), 0.5);
          color: map-get($configuration, lfdFontColorDesktop);
        }
      }
    }

    .new-small-h-card-list-container {
      .small-h-card-list-detail-wrapper.open {
        background-color: map-get($configuration, lfdDetailBackgroundColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        .small-h-card-list-detail-wrapper.open {
          background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        .small-h-card-list-detail-wrapper.open {
          background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
        }
      }
    }

    .small-h-card-detail-overlay {
      .small-h-card-detail-overlay-wrapper {
        .small-h-card-detail-overlay-panel {
          background-color: map-get($configuration, lfdDetailBackgroundColor);
          color: map-get($configuration, lfdDetailFontColor);

          .small-h-card-detail-wrapper {
            .small-h-card-list-detail-content-wrapper {
              background-color: map-get($configuration, lfdDetailBackgroundColor);

              .small-h-card-list-name,
              .small-h-card-list-role,
              .small-h-card-list-location,
              .small-h-card-list-detail-role,
              .small-h-card-list-detail-location {
                color: map-get($configuration, lfdDetailFontColor);
              }

              .small-h-card-list-detail-name {
                color: map-get($configuration, lfdDetailFontColor);

                &:after {
                  background-color: $highlightColor;
                }
              }

              .small-h-card-list-detail-button a {
                color: map-get($configuration, lfdDetailFontColor);

                &:hover,
                &:focus,
                &:active,
                &:active:hover,
                &:active:focus {
                  color: map-get($configuration, lfdDetailFontColor);
                }
              }

              .small-h-card-detail-overlay-close {
                background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
                color: map-get($configuration, lfdDetailFontColor);
              }
            }

            .small-h-card-list-detail-image-wrapper {
              color: rgba(map-get($configuration, lfdDetailFontColor), 0.1);
              background-color: rgba(map-get($configuration, lfdDetailFontColor), 0.04);
            }
          }
        }

        .small-h-card-detail-overlay-close {
          background-color: rgba(map-get($configuration, lfdDetailBackgroundColor), 0.5);
          color: map-get($configuration, lfdDetailFontColor);
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          .small-h-card-detail-overlay-panel {
            background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
            color: map-get($configuration, lfdDetailFontColorTablet);

            .small-h-card-detail-wrapper {
              .small-h-card-list-detail-content-wrapper {
                background-color: map-get($configuration, lfdDetailBackgroundColorTablet);

                .small-h-card-list-name,
                .small-h-card-list-role,
                .small-h-card-list-location,
                .small-h-card-list-detail-role,
                .small-h-card-list-detail-location {
                  color: map-get($configuration, lfdDetailFontColorTablet);
                }

                .small-h-card-list-detail-name {
                  color: map-get($configuration, lfdDetailFontColorTablet);
                }

                .small-h-card-list-detail-button a {
                  color: map-get($configuration, lfdDetailFontColorTablet);

                  &:hover,
                  &:focus,
                  &:active,
                  &:active:hover,
                  &:active:focus {
                    color: map-get($configuration, lfdDetailFontColorTablet);
                  }
                }

                .small-h-card-detail-overlay-close {
                  background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
                  color: map-get($configuration, lfdDetailFontColorTablet);
                }
              }

              .small-h-card-list-detail-image-wrapper {
                color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.1);
                background-color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.04);
              }
            }
          }

          .small-h-card-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorTablet), 0.5);
            color: map-get($configuration, lfdDetailFontColorTablet);
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          .small-h-card-detail-overlay-panel {
            background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
            color: map-get($configuration, lfdDetailFontColorDesktop);

            .small-h-card-detail-wrapper {
              .small-h-card-list-detail-content-wrapper {
                background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);

                .small-h-card-list-name,
                .small-h-card-list-role,
                .small-h-card-list-location,
                .small-h-card-list-detail-role,
                .small-h-card-list-detail-location {
                  color: map-get($configuration, lfdDetailFontColorDesktop);
                }

                .small-h-card-list-detail-name {
                  color: map-get($configuration, lfdDetailFontColorDesktop);
                }

                .small-h-card-list-detail-button a {
                  color: map-get($configuration, lfdDetailFontColorDesktop);

                  &:hover,
                  &:focus,
                  &:active,
                  &:active:hover,
                  &:active:focus {
                    color: map-get($configuration, lfdDetailFontColorDesktop);
                  }
                }

                .small-h-card-detail-overlay-close {
                  background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
                  color: map-get($configuration, lfdDetailFontColorDesktop);
                }
              }

              .small-h-card-list-detail-image-wrapper {
                color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.1);
                background-color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.04);
              }
            }
          }

          .small-h-card-detail-overlay-close {
            background-color: rgba(map-get($configuration, lfdDetailBackgroundColorDesktop), 0.5);
            color: map-get($configuration, lfdDetailFontColorDesktop);
          }
        }
      }
    }

    .dynamic-list-add-item {
      background-color: $highlightColor;
      color: $primaryButtonTextColor;

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: $primaryButtonTextColorTablet;
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: $primaryButtonTextColorDesktop;
      }
    }

    .btn.dynamic-list-edit-item {
      border: 1px solid rgba(map-get($configuration, lfdDetailFontColor), 0.3);
      background-color: map-get($configuration, lfdDetailBackgroundColor);
      color: rgba(map-get($configuration, lfdDetailFontColor), 0.5);
      border-radius: 40px;

      @include above($tabletBreakpoint) {
        border: 1px solid rgba(map-get($configuration, lfdDetailFontColorTablet), 0.3);
        background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
        color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.5);
        border-radius: 40px;
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border: 1px solid rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.3);
        background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
        color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.5);
        border-radius: 40px;
      }
    }

    .btn.dynamic-list-edit-item:hover,
    .btn.dynamic-list-edit-item:active,
    .btn.dynamic-list-edit-item:active:focus {
      border: 1px solid rgba(map-get($configuration, lfdDetailFontColor), 0.3);
      background-color: rgba(map-get($configuration, lfdDetailFontColor), 0.1);
      color: map-get($configuration, lfdDetailFontColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border: 1px solid rgba(map-get($configuration, lfdDetailFontColorTablet), 0.3);
        background-color: rgba(map-get($configuration, lfdDetailFontColorTablet), 0.1);
        color: map-get($configuration, lfdDetailFontColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border: 1px solid rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.3);
        background-color: rgba(map-get($configuration, lfdDetailFontColorDesktop), 0.1);
        color: map-get($configuration, lfdDetailFontColorDesktop);
      }
    }

    .news-feed-bookmark-holder {
      .fa-bookmark {
        color: $highlightColor;
      }
    }

    .simple-list-container {
      color: map-get($configuration, lfdFontColor);

      .list-item-arrow {
        color: map-get($configuration, lfdChevronColor);
      }

      .simple-list-item {
        background-color: map-get($configuration, lfdBackgroundColor);
        border-bottom: map-get($configuration, lfdSeparatorWidth) map-get($configuration, lfdSeparatorStyle) map-get($configuration, lfdSeparatorColor);
      }

      .simple-list-item .list-item-description,
      .simple-list-item .list-item-subtitle {
        color: map-get($configuration, lfdFontColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, lfdFontColorTablet);

        .list-item-arrow {
          color: map-get($configuration, lfdChevronColorTablet);
        }

        .simple-list-item {
          background-color: map-get($configuration, lfdBackgroundColorTablet);
          border-bottom: map-get($configuration, lfdSeparatorWidthTablet) map-get($configuration, lfdSeparatorStyleTablet) map-get($configuration, lfdSeparatorColorTablet);
        }

        .simple-list-item .list-item-description,
        .simple-list-item .list-item-subtitle {
          color: map-get($configuration, lfdFontColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, lfdFontColorDesktop);

        .list-item-arrow {
          color: map-get($configuration, lfdChevronColorDesktop);
        }

        .simple-list-item {
          background-color: map-get($configuration, lfdBackgroundColorDesktop);
          border-bottom: map-get($configuration, lfdSeparatorWidthDesktop) map-get($configuration, lfdSeparatorStyleDesktop) map-get($configuration, lfdSeparatorColorDesktop);
        }

        .simple-list-item .list-item-description,
        .simple-list-item .list-item-subtitle {
          color: map-get($configuration, lfdFontColorDesktop);
        }
      }
    }

    .simple-list-detail-overlay-panel .simple-list-detail-overlay-heading,
    .simple-list-detail-overlay .simple-list-detail-overlay-panel {
      background-color: map-get($configuration, lfdDetailBackgroundColor);
      color: map-get($configuration, lfdDetailFontColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, lfdDetailBackgroundColorTablet);
        color: map-get($configuration, lfdDetailFontColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, lfdDetailBackgroundColorDesktop);
        color: map-get($configuration, lfdDetailFontColorDesktop);
      }
    }
  }
}

@include lfd();
